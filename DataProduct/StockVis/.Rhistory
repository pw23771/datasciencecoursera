est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray-1, InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,C)
spray2<-relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray-1, spray2)
fit2 <- lm(InsectSprays$count ~ spray2-1)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
rm(list=ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
data(mtcars)
fit<-lm(mpg~wt,data=mtcars)
summary(fit)
fit1<-lm(I(mpg-mean(mpg))~I(wt-mean(wt)),data=mtcars)
summary(fit1)
sumCoef <- summary(fit1)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumCoef[2, 2]
pred<-predict(fit1,newdata=data.frame(wt=c(3)))
pred
weight <-3-mean(mpg)
pred<-predict(fit1,newdata=data.frame(wt=c(weight)))
weight <-3-mean(mtcars$mpg)
pred<-predict(fit1,newdata=data.frame(wt=c(weight)))
pred
weight
mean(mtcars$mpg)
weight <-3-mean(mtcars$wt)
pred<-predict(fit1,newdata=data.frame(wt=c(weight)))
weight
mean(mtcars$wt)
pred
weight <-3
pred<-predict(fit,newdata=data.frame(wt=c(weight)))
sumCoef<-summary(fit)$coefficients
pred
mean(mtcars$wt)
weight <-3-mean(mtcars$wt)
pred<-predict(fit1,newdata=data.frame(wt=c(weight)))
weight
pred
predict(fit1)
summary(fit1)
summary(fit)
predict(fit1)
predict(fit)
data(mtcars)
fit1<-lm(mpg~I(wt-mean(wt)),data=mtcars)
summary(fit1)
sumCoef <- summary(fit1)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumCoef[2, 2]
weight <-3-mean(mtcars$wt)
pred<-predict(fit1,newdata=data.frame(wt=c(weight)))
sumCoef<-summary(fit1)$coefficients
(c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2])*weight
pred
(sumCoef[2,1] +c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2])*weight
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumCoef[2, 2])*weight
summary(fit1)$coefficients
sumCoef[2,1]
sumCoef[2, 2]
pred
predict(fit1,newdata=data.frame(wt=c(weight)))
predict(fit,newdata=data.frame(wt=c(3)))
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumCoef[2, 2]
data(mtcars)
fit1<-lm(mpg~I(wt-mean(wt)),data=mtcars)
fit<-lm(mpg~wt,data=mtcars)
predict(fit,newdata=data.frame(wt=c(3)))
predict(fit1,newdata=data.frame(wt=c(weight)))
summary(fit)
summary(fit1)
fit2<-lm(I(mpg-mean(mpg))~I(wt-mean(wt)),data=mtcars)
summary(fit2)
predict(fit2,newdata=data.frame(wt=c(weight)))
weight
mpg<-mean(mtcars$mpg)
mpg
fit2<-lm(mpg~I(0.5*wt),data=mtcars)
sumCoef <- summary(fit2)$coefficients
# print out confidence interval for beta0
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef[2, 2]
data(mtcars)
fit1<-lm(mpg~I(wt-mean(wt)),data=mtcars)
summary(fit1)
sumCoef <- summary(fit1)$coefficients
sumCoef[2,1]
predict(fit1,,data.frame(x=mean(mtcars$wt)), interval="confidence")
predict(fit1,data.frame(x=mean(mtcars$wt)), interval="confidence")
predict(fit1,data.frame(wt=mean(mtcars$wt)), interval="confidence")
predict(fit,data.frame(wt=mean(mtcars$wt)), interval="confidence")
weight <-3
predict(fit1,newdata=data.frame(wt=c(weight)))
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumCoef[2, 2])*weight
predict(fit,data.frame(wt=3), interval="prediction")
rm(list=ls())
library("swirl", lib.loc="/usr/lib64/R/library")
swirl()
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,data=hunger)
fit$coefficents
fit$coefficent
fit$coef
summary(fit)$coef
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sec=="Female"],data=hunger)
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],data=hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],data=hunger)
lmBoth<-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,data=hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno<-lm(y~x,out[-1,])
fitno<-lm(y~x,out2[-1,])
>plot
?plot
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <-out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-summary(fit)$sigma
rstd<-summary(fit)$residual/sigma/sqrt(1-hatvalues(fit))
head(cbind(rstd, rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigmal<-summary(fitno)$sigma
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigmal*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fit,out2)-predict(fit,out2)
dy<-predict(fitno,out2)-predict(fit,out2)
sum(dy*dy)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,data=swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Examination,data=swiss)
vif(mdl2)
rm(list=ls())
data(mtcars)
head(mtcars)
fit<-lm(mpg~wt+cyl,data=mtcars)
summary(fit)
fit8<-lm(mpg~wt,data=mtcars[cyl=8])
summary(fit8)
fit4<-lm(mpg~wt,data=mtcars[cyl=4])
summary(fit4)
fit8<-lm(mpg~wt,data=mtcars[cyl==8])
summary(fit8)
fit4<-lm(mpg~wt,data=mtcars[cyl==4])
summary(fit4)
fit8<-lm(mpg~wt,data=mtcars[cyl=="8"])
summary(fit8)
fit4<-lm(mpg~wt,data=mtcars[cyl=="4"])
summary(fit4)
fit8<-lm(mpg~wt,data=mtcars[mtcars$cyl=="8"])
summary(fit8)
fit4<-lm(mpg~wt,data=mtcars[mtcars$cyl=="4"])
summary(fit4)
fit8<-lm(mpg~wt,data=mtcars[mtcars$cyl=="8",])
summary(fit8)
fit4<-lm(mpg~wt,data=mtcars[mtcars$cyl=="4",])
summary(fit4)
fit<-lm(mpg~wt+cyl,data=mtcars)
fit$coef
rm(list=ls())
data(mtcars)
head(mtcars)
str(mtcars)
fit<-lm(mpg~wt+as.factor(cyl),data=mtcars)
fit$coef
summary(fit)
fit1<-lm(mpg~as.factor(cyl),data=mtcars)
summary(fit1)
fit2<-lm(mpg~wt*as.factor(cyl),data=mtcars)
summary(fit2)
summary(fit)
fit3<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit4<-lm(y~x)
hatvalues(fit4)
dfbeta(fit4)
dfbeta(fit4)[,2]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5<-lm(y~x)
dfbeta(fit5)
hatvalues(fit4)
dfbeta(fit5)
summary(fit5)
dfbeta(fit5)
fit2<-lm(mpg~wt*as.factor(cyl),data=mtcars)
summary(fit2)
lrtest(fit, fit2)
summary(fit3)
influence.measures(fit5)
dfbeta(fit5)
library(MASS)
shuttle$useNum <- as.integer(shuttle$use == "auto")
shuttle
fit <- glm(useNum ~ wind - 1, data = shuttle, family = binomial)
exp(coef(fit))[1]/exp(coef(fit))[2]
fit2 <- glm(useNum ~ wind+magn - 1, data = shuttle, family = binomial)
exp(coef(fit2))
fit4<- glm(count~as.factor(spray)-1,family="poisson",data=InsectSprays)
exp(coef(fit4))
install.packages("AppliedPredictiveModeling")
library("caret", lib.loc="/usr/lib64/R/library")
detach("package:caret", unload=TRUE)
install.packages("caret")
library("AppliedPredictiveModeling", lib.loc="/usr/lib64/R/library")
library("caret", lib.loc="/usr/lib64/R/library")
data(AlzheimerDisease)
rm(list=ls())
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
summary(training)
adData[1,1]
adData[,1]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(inTrain)
summary(mixtures)
training[,Superplasticiz]
training[,"Superplasticiz"]
training[,"Superplasticizer"]
log(training[,"Superplasticizer"])
training[,"Superplasticizer"]
rm(list=ls())
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
ILcolumns <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, ILcolumns], method=c("center", "scale", "pca"), thresh=0.8)
preObj
ILcolumns <- grep("^[Ii][Ll].*", names(training))
new_training <- training[, c(names(training)[ILcolumns], "diagnosis")]
names(new_training)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
ILcolumns <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[, c(names(testing)[ILcolumns], "diagnosis")]
names(new_testing)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
rm(list=ls())
install.packages("ElemStatLearn")
install.packages("pgmm")
library("rpart", lib.loc="/usr/lib64/R/library")
library("pgmm", lib.loc="/usr/lib64/R/library")
library("ElemStatLearn", lib.loc="/usr/lib64/R/library")
library("caret", lib.loc="/usr/lib64/R/library")
library("AppliedPredictiveModeling", lib.loc="/usr/lib64/R/library")
data(segmentationOriginal)
str*segmentationOriginal)
str(segmentationOriginal)
head(segmentationOriginal)
Training <- subset(segmentationOriginal, Case=="Test")
str(Training)
head(Training)
head(segmentationOriginal$Case)
set.seed(125)
fit <- rpart(Class~.,method="class",data=Training)
summary(fit)
plot(fit)
plot(fit, uniform=TRUE, main="test")
plotcp(fit)
plot(fit, uniform=TRUE, main="test")
printcp(fit)
fitVar <- names(Training[,-3])
fitVar
summary(fit)
fit <- train(Class~.,data=Training, method="rpart")
summary(fit)
fit$finalModel
plot(fit, uniform=TRUE, main="test")
plot(fit$finalModel, uniform=TRUE, main="test")
fancyRpartPlot(fit$finalModel)
which(colnames(training)=="TotalIntenCh2")
which(colnames(Training)=="TotalIntenCh2")
cols <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="PerimStatusCh1"))
cols
predData[1,cols]=c(23000,10,2)
predData[2,cols]=c(50000,10,100)
predData[3,cols]=c(57000,8,100)
predict(fit,predData)
predData <-Training[1:3,]
predData[1,cols]=c(23000,10,2)
predData[2,cols]=c(50000,10,100)
predData[3,cols]=c(57000,8,100)
predict(fit,predData)
fit <- rpart(Class~.,method="class",data=Training)
predData <-Training[1:3,]
predData[1,cols]=c(23000,10,2)
predData[2,cols]=c(50000,10,100)
predData[3,cols]=c(57000,8,100)
predict(fit,predData)
cols1 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="PerimStatusCh1"))
cols2 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols3 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols4 <- c(which(which(colnames(Training)=="FiberWidthCh1"),colnames(Training)=="VarIntenCh4"),which(colnames(Training)=="PerimStatusCh1"))
predData <-Training[1:4,]
predData[1,cols1]=c(23000,10,2)
predData[2,cols2]=c(50000,10,100)
predData[3,cols3]=c(57000,8,100)
predData[4,cols4]=c(8,100,2)
predict(fit,predData)
cols1 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="PerimStatusCh1"))
cols2 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols3 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols4 <- c(which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"),which(colnames(Training)=="PerimStatusCh1"))
predData <-Training[1:4,]
predData[1,cols1]=c(23000,10,2)
predData[2,cols2]=c(50000,10,100)
predData[3,cols3]=c(57000,8,100)
predData[4,cols4]=c(8,100,2)
predict(fit,predData)
predict(fit,predData, type="class")
fit <- train(Class~.,data=Training, method="rpart")
cols1 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="PerimStatusCh1"))
cols2 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols3 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols4 <- c(which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"),which(colnames(Training)=="PerimStatusCh1"))
predData <-Training[1:4,]
predData[1,cols1]=c(23000,10,2)
predData[2,cols2]=c(50000,10,100)
predData[3,cols3]=c(57000,8,100)
predData[4,cols4]=c(8,100,2)
predict(fit,predData, type="class")
predict(fit,predData)
dim(Training)
dim(Training)[2]
predData <-data.frame(matrix(ncol = dim(Training)[2],nrow=4))
names(Training)
Training$names
colnames(preData)<-names(Training)
predData <-data.frame(matrix(ncol = dim(Training)[2],nrow=4))
colnames(preData)<-names(Training)
colnames(predData)<-names(Training)
str(predData)
predData[1,cols1]=c(23000,10,2)
predData[2,cols2]=c(50000,10,100)
predData[3,cols3]=c(57000,8,100)
predData[4,cols4]=c(8,100,2)
predict(fit,predData)
fit <- train(Class~.,data=Training, method="rpart")
summary(fit)
fit$finalModel
cols1 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="PerimStatusCh1"))
cols2 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
cols3 <- c(which(colnames(Training)=="TotalIntenCh2"),which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"))
#cols4 <- c(which(colnames(Training)=="FiberWidthCh1"),which(colnames(Training)=="VarIntenCh4"),which(colnames(Training)=="PerimStatusCh1"))
predData <-Training[1:3,]
colnames(predData)<-names(Training)
predData[1,cols1]=c(23000,10,2)
predData[2,cols2]=c(50000,10,100)
predData[3,cols3]=c(57000,8,100)
predict(fit,predData)
detach("package:ElemStatLearn", unload=TRUE)
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
str(olive)
fit <- train(Area~.,data=olive, method="rpart")
newdata <- as.data.frame(t(colMeans(olive)))
predict(fit,newdata)
colMeans(olive)
t(colMeans(olive))
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
fit <- train(chd~alcohol+obesity+tobacco+typea+ldl.,data=trainSA, method="glm",family="binomial)
)
)
.
]
q
w
e
r
t
y
u
i
}
/
.
,
\
fit <- train(chd~alcohol+obesity+tobacco+typea+ldl,data=trainSA, method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
str(trainSA)
str(vowel.train)
vowel.train$y
str(vowel.train)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train
)
fit <- train(y~., data=vowel.train,method="rf")
imps <- varImp(fit)
order(imps)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
summary(fit)
order(imps)
install.packages('/root/Downloads/ElemStatLearn_2012.04-0.tar.gz', type='source',repos=NULL,dependence=TRUE)
detach("package:ElemStatLearn", unload=TRUE)
library("ElemStatLearn", lib.loc="/usr/lib64/R/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
#fit <- train(y~., data=vowel.train,method="rf")
fit <- randomForest(y~.,data=vowel.train)
va <- varImp(fit)
order(va)
va
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd~alcohol+obesity+tobacco+typea+ldl,data=trainSA, method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
install.packages("devtools")
install.packages("xml2")
install.packages("xml2")
install.packages("devtools")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages(c("Rcpp", "RcppArmadillo", "RcppEigen"))
install.packages(c("Rcpp", "RcppArmadillo", "RcppEigen"))
install.packages(c("Rcpp", "RcppArmadillo", "RcppEigen"))
install.packages("xml2")
install.packages("devtoola")
install.packages("devtools")
library("devtools", lib.loc="/usr/lib64/R/library")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install.packages(c("BH", "boot", "BradleyTerry2", "car", "chron", "class", "cluster", "codetools", "colorspace", "CORElearn", "dplyr", "e1071", "ElemStatLearn", "foreign", "ggplot2", "gridExtra", "gtools", "httr", "jsonlite", "KernSmooth", "lattice", "lme4", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "quantmod", "R6", "RCurl", "rmarkdown", "rpart", "RSNNS", "scales", "spatial", "survival", "testthat", "tidyr", "tree", "TTR", "UsingR"))
library(slidify)
setwd("/root/Documents/Coursera/DataProduct")
rm(list=ls())
library("quantmod", lib.loc="/usr/lib64/R/library")
library("shiny", lib.loc="/usr/lib64/R/library")
runApp("StockVis")
?getSymbols
install.packages("downloader")
library("downloader", lib.loc="/usr/lib64/R/library")
runApp("StockVis")
runApp("StockVis")
setwd("RPresenter")
Sys.Date()
runApp("../StockVis")
