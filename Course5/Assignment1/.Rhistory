source('~/Documents/RStudio/corr.R')
cor<-corr("specdata",5000)
summary(cor)
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata",400)
head(cr)
summary(cr)
cr<-corr("specdata")
summary(cr)
length(cr)
cr<-corr("specdata",5000)
summary(cr)
length(cr)
source("submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
c<-rbind(c(1,-0.25),c(-0.25,1))
cacheSolve(c)
makeCacheMatrix(c)
x
class(x)
minv
cacheSolve(c)
class(c)
c
cacheSolve(x=c)
cacheSolve()
makeCacheMatrix(c)
make<-makeCacheMatrix(c)
class(make)
cacheSolve(make)
make$getinverse()
make$get()
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
make<-makeCacheMatrix(c)
cacheSolve(make)
source('~/.active-rstudio-document')
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
make<-makeCacheMatrix(c)
cacheSolve(make)
notmake<-makeCacheMatrix()
cacheSolve(notmake)
makec<-notmake(c)
class(notmake)
notmake<-makeCacheMatrix
makec<-notmake(c)
cacheSolve(makec)
cacheSolve(makec)
d<-martrix(c(rep(1,16)),nrow=4,ncol=4)
d<-matrix(c(rep(1,16)),nrow=4,ncol=4)
maked<-notmake(d)
cacheSolve(maked)
d<-matrix(c(1,2,3,4,4,3,5,6,1,3,4,5,3,4,2,1),nrow=4,ncol=4)
maked<-notmake(d)
cacheSolve(maked)
m1<-matrix(c(1.1,1.3,2.0,3,6,7),nrow=2,ncol=3)
solve(m1)
m1<-matrix(c(1.1,1.3,2.0,3,6,7),nrow=2,ncol=2)
m2<-matrix(c(1.1,1.3,2.0,3,6,7,5,7,8),nrow=3,ncol=3)
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(m1)
x2<makeCacheMatrix(m2)
x2<-makeCacheMatrix(m2)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x2)
cacheSolve(x2)
cacheSolve(x2)
cacheSolve(x)
m1<-matrix(c(1.1,1.3,2.0,3,7,8),nrow=2,ncol=2)
m2<-matrix(c(1.1,1.3,2.0,3,6,5,4,7,8),nrow=3,ncol=3)
cacheSolve(x)
x2<makeCacheMatrix(m2)
x2<-makeCacheMatrix(m2)
x<-makeCacheMatrix(m1)
cacheSolve(x)
cacheSolve(x2)
mat<-matrix(c(1.1,2.1,3.1,4.1))
makeCache<-makeCacheMatrix(mat)
cacheSolve(makeCache)
mat
mat<-matrix(c(1.1,2.1,3.1,4.1),nrow=2,ncol=2)
makeCache<-makeCacheMatrix(mat)
cacheSolve(makeCache)
cacheSolve(makeCache)
cacheSolve(makeCache)
cacheSolve(makeCache)
solve(m1,...)
solve(m1)
source('~/.active-rstudio-document')
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
mat<-matrix(c(1.1,2.1,3.1,4.1),nrow=2,ncol=2)
makeCache<-makeCacheMatrix(mat)
cacheSolve(makeCache)
cacheSolve(makeCache)
mat
mat%*%solve(makeCache)
mat%*%cacheSolve(makeCache)
gl(3,10)
str(gl)
?gl
?message
?warning
?condition
?invisible
?traceback
?debug
?browser
?trace
?recover
##options(error=recover)##
str(iris)
?iris
head(iris)
iris.Sepal<-split(iris,iris$Species)
str(iris.Sepal)
summary(iris.Sepal)
vir<-iris.Sepal$virginica
summary(vir)
head(vir)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
str(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
x[1]-x[3]
str(x)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x
x[3]-x[1]
?tapply
?apply
str(x)
x[1]
make
vir
class(vir)
vir[1]
vir[,1]
vir[1,]
vir[[1]]
class(vir[[1]])
class(vir[1])
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
plot(x,y)
lm
library("swirl", lib.loc="/usr/lib64/R/library")
ls()
rm(list=ls())
ls()
library("swirl", lib.loc="/usr/lib64/R/library")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
?read.csv
mydf<-read.csv(path2csv,"stringAsFactors=FALSE")
mydf<-read.csv(path2csv,"stringsAsFactors=FALSE")
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
dim(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
head(cran)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(1:10))
select(cran,-(1:11))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size >100500,r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is_na(r_version))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size-1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
info()
bye()
nxt()
library("swirl", lib.loc="/usr/lib64/R/library")
swirl()
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
# console. Note that since there are no additional arguments
cran %>%
select(ip_id,country,package,size) %>%
print
source('/tmp/Rtmp1BXtRi/chain1.R')
# operator.
cran %>%
select() %>%
print
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library("swirl", lib.loc="/usr/lib64/R/library")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate()
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,now())
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,h=17,m=34)
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+hours(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
ls()
rm(list=ls())
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
?download.file
destfile<-"lec1prob1.csv"
download.file(url,destfile,method="curl")
mydata<-read.csv(destfile)
head(mydate)
head(mydata)
mydata$properties
mydata$VAL
mydata[mydata$VAL>13]
subset(mydata,VAL>13)
mydataVAL<-subset(mydata,VAL>13)
mydataVAL$VAL
size(mydataVAL)
length(mydataVAL)
sum(mydataVAL)
head(mydataVAL$VAL)
nrows(mydataVAL)
nrow(mydataVAL)
nrow(mydata)
mydataVAL<-subset(mydata,VAL>23)
nrow(mydataVAL)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
library(xlsx)
install(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
getwd()
MonitorFile<-"./CC36H0015/MonitorLocationLog.csv"
Loc<-read.csv(MonitorFile)
Loc<-read.table(MonitorFile,sep=",")
MonitorFile<-"./CC36H00150/MonitorLocationLog.csv"
Loc<-read.csv(MonitorFile)
head(Loc)
class(Loc)
names(Loc)
Loc<-read.csv(MonitorFile,header=F)
names(Loc)
subset(Loc,c("V4","V19"))
?subset
subset(Loc,select=c("V4","V19"))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?text
?points
library(datasets)
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="/usr/lib64/R/library")
library("ggplot2", lib.loc="/usr/lib64/R/library")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
install.packages("neuralnet")
install.packages("NeuralNetTools")
getwd()
rm(list=ls())
setwd("/root/Documents/Coursera/Course5/Assignment1")
sumary(activityDF)
activityDF<-read.csv("activity.csv")
summary(activityDF)
str(activityDF)
names(activityDF)
class(activity.$date)
class(activity)
class(activityDF)
class(activityDF$date)
as.Date(activityDF$date)
test<-as.Date(activityDF$date)
head(test)
summary(test)
class(tst)
class(test)
activityDF$date<-as.Date(activityDF$date)
summary(activityDF)
hist(activityDF$steps)
stepsbyday <- aggregate(activityDF$steps, by=list(day=activityDF$date), FUN=sum)
head(stepsbyday)
stepsbyday <- aggregate(activityDF$steps, by=list(day=activityDF$date), FUN=sum,na.rm=TRUE)
head(stepsbyday)
barplot(stepsbyday)
steps<-table(stepsbyday$x,stepsbyday$day)
barplot(steps)
head(steps)
barplot(stepsbyday$x)
summary(stepsbyday)
hist(stepsbyday$x)
hist(stepsbyday$x,col="red",las=1,main="Total Steps Histogram",xlab="Total Steps per Day")
stepsbyday <- aggregate(steps~date, data=activityDF, by=list(day=activityDF$date), FUN=sum, na.rm=TRUE)
?aggregate
stepsbyday <- aggregate(steps~date, data=activityDF, FUN=sum, na.rm=TRUE)
head(stepsbyday)
hist(stepsbyday$x,col="red",las=1,main="Total Steps Histogram",xlab="Total Steps per Day")
mean(stepsbyday$steps)
median(stepsbyday$steps)
hist(stepsbyday$steps,col="red",las=1,main="Total Steps Histogram",xlab="Total Steps per Day")
mean(stepsbyday$steps)
median(stepsbyday$steps)
?tapply
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
fac
tapply(1:n, fac, sum)
1:17
activity$interval
activityDF$interval
activity_daily<-tapply(activityDF$steps,activityDF$interval, mean, na.rm=TRUE)
head(activity_daily)
str(activity_daily)
names(activity_daily)
plot(row.names(activity_daily),activity_daily, type="1", main="Average daily activity pattern", xlab="5-min interval",ylab="Averaged across all days",las=1
)
plot(row.names(activity_daily),activity_daily, type="l", main="Average daily activity pattern", xlab="5-min interval",ylab="Averaged across all days",las=1)
?max
max(activity_daily)
?which
which.max(activity_daily)
activity_daily_max <- which.max(activity_daily)
activity_daily_max <- which.max(activity_daily)
class(activity_daily_max)
str(activity_daily_max)
activity_daily_max
head(activity_daily)
class(activity_daily)
activity_daily[104]
names(activity_daily_max)
value(activity_daily_max)
index(activity_daily[activity_daily_max])
names(which.max(activity_daily))
sum(is.na(activityDF))
is.na(activityDF$steps)
sum(is.na(activityDF$steps))
sum(is.na(activityDF))
activity_daily["5"]
na_values <-is.na(activityDF$steps)
activityDF$steps[na_values]
activityDF$interval[na_values]
activity_daily[activityDF$interval[na_values]]
as.character(activityDF$interval[na_values]])
as.character(activityDF$interval[na_values])
activity_daily[as.character(activityDF$interval[na_values])]
